# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type BookDto {
  _id: ObjectId!
  author: String!
  category: Category!
  created_at: DateTime!
  name: String!
  pages: Int!
  publicationDate: String!
  publisher: String!
  unitValue: Float!
}

"""Book category type definition"""
enum Category {
  biografias
  colecoes
  comportamento
  contos
  critica_literaria
  ficcao_cientifica
  folclore
  genealogia
  humor
  infanto_juvenis
  jogos
  jornais
  literatura_brasileira
  literatura_estrangeira
  livros_raros
  manuscritos
  outros
  poesia
}

input CredentialsDto {
  email: String!
  password: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type DefaultResponse {
  message: String!
  success: Boolean!
}

type Mutation {
  inactivateSessions(user_id: String!): DefaultResponse!
  inactivateUser(user_id: String!): DefaultResponse!
  insertUser(input: UserInput!): DefaultResponse!
  login(credentials: CredentialsDto!): SessionResponse!
  updateUserPassword(password: String!, user_id: String!): DefaultResponse!
}

"""Mongo Object Id scalar type"""
scalar ObjectId

input PaginationParams {
  page: Int
  pageSize: Int
  search: String
  sort: [String!]
  sortDirection: [SortDirection!]
}

type Query {
  books: [BookDto!]!
  session(session_id: String!): SessionDto!
  sessions(pagination: PaginationParams!): SessionsDataOutput!
  user(user_id: String!): UserDto!
  users(filters: UserFiltersInput!, pagination: PaginationParams!): UserDataOutput!
}

"""Role type definitions"""
enum Role {
  admin
  manager
  user
}

type SessionDto {
  _id: ObjectId!
  active: Boolean!
  created_at: DateTime!
  expires_at: DateTime!
  session_id: String!
  token: String!
  user: UserSessionDto!
}

type SessionResponse {
  session_id: String!
}

type SessionsDataOutput {
  count: Int!
  data: [SessionDto!]!
}

"""Sort direction definition"""
enum SortDirection {
  ASC
  DESC
}

type UserDataOutput {
  count: Int!
  data: [UserDto!]!
}

type UserDto {
  _id: ObjectId!
  active: Boolean!
  created_at: DateTime!
  email: String!
  password: String!
  role: Role!
  updated_at: DateTime!
  username: String!
}

input UserFiltersInput {
  active: Boolean
  role: Role
}

input UserInput {
  email: String!
  password: String!
  role: Role
  username: String!
}

type UserSessionDto {
  _id: ObjectId!
  role: Role!
}
